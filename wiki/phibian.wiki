#summary project 'phibian' details

<wiki:toc max_depth="6">

Note:  If interested in submitting a client AI for testing against the phibian game server(in development), please email jeremy.cothran@gmail.com with 'phibian' in the subject line.

= Introduction =

Wanted to try to provide a game server for more continuous AI development and code sharing.  Most AI contests I've seen so far involve sending a code package to a server for execution on a game contest server - while these contests are helpful,fun and informative, they don't provide a forum for sharing and evolving code in a community way.

To provide an alternative, the 'phibian' (short for amphibian, something between evolutionary stages) project is designed initially to provide a simple game data/event API with which to exchange game information between a game server and clients, allowing AI developers to focus more on the AI development aspects and continual improvement and sharing than a singular, packaged AI.  This design is modeled after human multiplayer interaction, where the player has the screen and controller interface to the game and anticipates that at some point machine vision/audio research will progress to the point of being able to 'play' games using the same screen/audio/controller interface that human players use(without having to hack the data stream directly).

= Initial game - Hunt =

The initial simplest game type would be a top-down 2D map perspective for 2-4 players/clients to 'hunt' each other.  Each player has a map x,y location and a 'cone' of vision with which to detect other players/goals.  Users would provide a username and password to authenticate and register their AI client.  The game server would accept and respond to the below simple commands on port 2346.  The game would create a simple text output file at the game end(not during the game to prevent cheating) detailing the game turn information for game visualization.  Initial game visualization is being developed in flash using some earlier game code with a similar top-down perspective and 'cone' vision http://code.google.com/p/sqlitebot/wiki/ShadowShot

A similar turn-based tactical shooter game concept is seen in the game 'Frozen Synapse' http://www.frozensynapse.com which draws from earlier classic games such as 'XCOM'.

== sample commands ==

game_request - request a new game to connect to

move,x,y  #move to map location x,y - predetermined speed of 'n' units per turn - will stop if hit a block/wall

rotate,x  #rotate focus to angle x - predetermined rotation speed of angle amount per turn

== sample return information ==

map_grid,x,y,1,1,1,0,1,...  #basic map setup information detailing the x and y dimensions of the map and whether a map space is open(0=movement allowed) or closed(1=movement not allowed)

= sample map =

http://sqlitebot.googlecode.com/files/phibian_map_1.png

= expected AI client development = 

  * A-star - pathing algorithms to navigate the map
  * map waypoints and/or sectors - to 'remember' or have memory of areas already visited or more intense action/scoring opportunities
  * movement/rotation behaviors, for example
    * when navigating a corridor, align vision with direction along the corrider(don't waste effort looking at walls or places unlikely to find an enemy)
    * when rounding approaching or rounding a corner, 'slice the pie' in regards to rounding the corner slowly to improve accuracy while aiming at the newly exposed area

  * team/squad information sharing - 2 or more clients might share information to more quickly or successful track other players/targets.  Will probably setup a gametype to request team play specifically to prevent an unfair game advantage.

  * code-library or sharing - bringing together individually developed micro/melee and macro/strategy behaviors into larger packages to 'evolve' the clients with better AI features