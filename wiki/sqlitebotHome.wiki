#summary sqliteBot homepage

<wiki:toc max_depth="6">

= Introduction =

Many gaming AI's utilize behavioral decision trees, few incorporate locational/situational memory as logged say via a lightweight relational database like sqlite

This is an open source project which is trying to utilize a [http://sqlite.org sqlite] database to store gaming bot location and situational awareness to help better adapt gaming AI(Artificial Intelligence) and behaviors for games.

The project is starting utilizing the [http://artemis.ms.mff.cuni.cz/pogamut/tiki-index.php Pogamut] Java/NetBeans based project code.

My(jeremy.cothran@gmail.com) development background is more with Perl so I'll be learning some Java and NetBeans as I go.  I've played with Unrealscript (similar to Java) in the past and familiar with some of the Unreal Tournament 2004 bot functions but will be learning more about that also as I go.

The initial goals of the project are:

  # Java - figure out how to properly break my files up so functions and variables are scoped properly
  # begin modifying bot behavior in interesting ways based on sqlite database lookups(locational/situational memory)

Initially I'm looking for help with the above two goals - writing Java classes/functions/packages appropriately split up across files in the project - figuring some interesting behaviors to tackle - and being familiar enough with the standing bot functions to leverage those without rewriting them.

The initial sqlite table would be structured something like:

{{{
CREATE TABLE obs_type (
    row_id integer PRIMARY KEY,
    row_entry_date text,
    map_id int,
    location text,
    status int
);
}}}

with *location* reflecting the bots map(*map_id*) location when a specified *status* (made a kill, was killed,etc) at a specified time(*row_entry_date*).

Tracking those things initially should allow a bot to begin selecting better and worse map locations for optimal scoring or begin time-based tactics or behaviors relating to location and predicted location of opponents.

----

= botv1 =

For the first version bot (botv1) all I've done is hack the basic pogamut bot [http://code.google.com/p/sqlitebot/source/browse/trunk/bot1/Main.java script] to write out its location to a [http://code.google.com/p/sqlitebot/source/browse/trunk/bot1/sample.db sqlite table] when the navpoint path is broken.

The write function is called 'nasty' and the table called 'people' for no good reason.  Will rename these more appropriately later.

== Gotchas ==

Two things that took me a while to figure out:

  # Set your java (and netbeans?) thread priorities in Windows to 'realtime' (and UT2004 to 'low') via the Task Manager - otherwise the bot seems to lag/hang in its environment waiting for the Java to execute.

  # To get going with sqlite and java I utilized the .jar at http://www.zentus.com/sqlitejdbc/ although the connection was refused by the program until I added the .jar to both the netbeans classpath and the java/jre/lib/ext folder (see http://www.newsvoter.com/blog/TechNotes/java-lang-ClassNotFoundException--org-sqlite-JDBC.html )

I'd like to try the Xerial sqlite .jar http://www.xerial.org/trac/Xerial/wiki/SQLiteJDBC as it should be faster executing, but the zentus seems to work for the time being.

----

= Subversion =

For notes on using [http://code.google.com/p/sqlitebot/source/browse/#svn/trunk subversion] for this project, see the notes at http://code.google.com/p/rcoos/wiki/SubversionNotes which should apply the same for this project except that the project name is 'sqlitebot' instead of 'rcoos'

----

= Links = 

http://delicious.com/giraclarc/pogamut

http://delicious.com/giraclarc/bots