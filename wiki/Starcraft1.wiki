#summary discussion of initial starcraft bot effort

This is a discussion of some [http://code.google.com/p/sqlitebot/source/browse/trunk/starcraft/v1.0/BasicAIModule.cpp sample C++ code] extended from the [http://code.google.com/p/bwsal BWSAL] AI example.  Many thanks to the [http://code.google.com/p/bwapi BWAPI], [http://code.google.com/p/bwsal BWSAL] and [http://code.google.com/p/bwapi BWTA] teams/individuals/projects for providing these useful game interfaces and examples to program on top of, and [http://www.youtube.com/watch?v=PbjsL5E1Idw Ben Weber] for organizing the [http://eis.ucsc.edu/StarCraftAICompetition Starcraft AI competition] whose competitors will be leveraging these tools.

My apologies up front for my poor C++ coding style/indentation - I learned Unix/C(or failed to learn depending on your perspective ;) a long time ago(in a galaxy far,far away) back in university classes and the past several years been more programming with Linux/perl/php(wanting to pick up more python) - so I'm having to grow a familiarity with Microsoft's Visual C++ Express environment and standard(std) libraries as I go.  If anyone wants to suggest a pretty-print utility(or function within the editor I'm unaware of) for the code I can give that a whirl as long as it doesn't muck up the code too much.

If you find these code examples useful, feel free to reuse them, but also please give me some acknowledgement by email that I might keep a public list of.  Also I would be glad to learn, share and incorporate others work into a more robust AI, so email if you have something to contribute in the way of development,testing,documentation,etc.

The easiest way to follow-along with the below discussion is to look at the side-by-side comparison in the code in the diff page below - I'll be referencing line numbers on the right-hand side that differ from the initial example.

Code diff page
http://code.google.com/p/sqlitebot/source/diff?spec=svn250&r=250&format=side&path=/trunk/starcraft/v1.0/BasicAIModule.cpp

If I don't reference line numbers below, its because it was something experimental that didn't work out for now.

<wiki:toc max_depth="6">
----
= Outline = 

The basics of an initial approach can be broken into the following 4 sections.

  * Build
  * onShow
  * onDestroy
  * checkIdle

My very first approach started with the default terran vulture(vehicle) build, but vultures don't have any air attack, so I switched to marines - lots and lots of marines.

Also I'm testing for now exclusively with terran vs terran matches - later on will consider zerg and protoss strategies, but trying to minimize the complexity of issues to work through for now.

Line 36-43 are global vars, that I reference later.

line #36 enableStart is set to true if you're running the AI from the very beginning of the game and set to false if you're testing the game after the initial build orders are complete.  Otherwise if you restart the game from a saved game midway, the AI will try to rebuild everything again.  There may also be some bugs/side-effects from running/testing this way in regards to how the Arbitrator or other BWSAL code(planning arrays that are populated at game begin) runs with regards to the assumption the game is always run from a clean start.

line #38 countTroop - how many troops do we have?

line #39 attackStrength - some minimum troop level before engaging an attack

line #40 scoutStrength - some minimum troop level before engaging scout(s)

line #42 myBase - pointer to our home command center unit

line #43 baseRadius - a distance radius from the base to help the AI differentiate between attacks on our home base(less than) and attacks in the field(greater than)

== Build == 

The initial build order is critical in quickly setting up the kind of production units needed for the strategies/tactics the AI expects to run.  This build order is for a marine/medic mob/attack/defense tactic.  You can experiment with the build order to see how quickly certain units can be produced with what capabilities - against the default game AI, some basic initial defense is needed to prevent from being overtaken by a possible aggressive initial rush.  The BWSAL building routines do a good job of placing building in a well-spaced spiraling outward fashion, but will unfortunately place some building units on the other side of walls and missile turrets without any tactical defense reference(near chokepoints or towards enemy approaches).

#line 117-118, 144-208

== onShow ==

== onDestroy == 

== checkIdle == 
----
= Issues =

----
= Next steps = 

----
= Links = 

http://medialogics.com/ma/strategies/starcraft_strategy_guide_6.html <br/>
http://classic.battle.net/scc/GS/
